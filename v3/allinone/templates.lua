return {{1,0,{"local sources = {}\n\n",{3,{"modules","module/part1"}},"local compat_load\ndo if pcall(load, '') then -- check if it's lua 5.2+ or LuaJIT's with a compatible load\n\tcompat_load = load\nelse\n\tlocal loadstring = assert(loadstring)\n\tlocal type = assert(type)\n\tlocal setfenv = assert(setfenv)\n\tlocal byte = assert(string.byte)\n\tlocal find = assert(string.find)\n\n\tlocal native_load = load\n\tfunction compat_load(str,src,mode,env)\n\t\tlocal chunk,err\n\t\tif type(str) == 'string' then\n\t\t\tif byte(1) == 27 and not find((mode or 'bt'),'b') then\n\t\t\t\treturn nil,\"attempt to load a binary chunk\"\n\t\t\tend\n\t\t\tchunk,err = loadstring(str,src)\n\t\telse\n\t\t\tchunk,err = native_load(str,src)\n\t\tend\n\t\tif chunk and env then setfenv(chunk,env) end\n\t\treturn chunk,err\n\tend\nend end\nlocal function preloadgeneric(modname, p)\n\tlocal src = sources[modname]\n\tif not src then return nil end\n\tsources[modname]=nil\n\treturn assert(compat_load(src, \"@\"..modname, \"t\", _G))(modname,p)\nend\n",{3,{"modules","module/part2"}},"\n",{3,{"main",0}}}},["module/part2"] = {1,0,{"package.preload",{3,{"k",0}}," = preloadgeneric\n"}},["module/part1"] = {1,0,{"sources",{3,{"k",0}}," = ",{3,{"v",0}},"\n\n"}}}
